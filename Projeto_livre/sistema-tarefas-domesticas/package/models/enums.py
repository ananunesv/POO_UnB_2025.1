#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enumera√ß√µes do Sistema de Tarefas Dom√©sticas
============================================

Define as enumera√ß√µes utilizadas no sistema para categorias de atividades
e situa√ß√µes das tarefas.
"""

from enum import Enum


class CategoriaAtividade(Enum):
    """
    Enumera√ß√£o que define as categorias poss√≠veis para as atividades dom√©sticas.
    
    Cada categoria representa um tipo espec√≠fico de tarefa da casa:
    - COZINHA: Tarefas relacionadas √† cozinha (lavar lou√ßa, limpar fog√£o, etc.)
    - LIMPEZA: Tarefas de limpeza geral (varrer, passar pano, aspirar, etc.)
    - JARDIM: Cuidados com plantas e √°rea externa (regar, podar, varrer quintal)
    - ROUPAS: Cuidados com vestu√°rio (lavar, passar, dobrar, guardar)
    - MANUTENCAO: Pequenos reparos e manuten√ß√£o da casa
    """
    
    COZINHA = "üçΩÔ∏è Cozinha"
    LIMPEZA = "üßπ Limpeza"
    JARDIM = "üå± Jardim"
    ROUPAS = "üß∫ Roupas"
    MANUTENCAO = "üîß Manuten√ß√£o"
    
    def __str__(self):
        """Retorna representa√ß√£o string da categoria."""
        return self.value
    
    @classmethod
    def obter_categorias(cls):
        """
        Retorna lista com todas as categorias dispon√≠veis.
        
        Returns:
            list: Lista de strings com nomes das categorias
        """
        return [categoria.value for categoria in cls]
    
    @classmethod
    def obter_por_nome(cls, nome):
        """
        Obt√©m categoria pelo nome.
        
        Args:
            nome (str): Nome da categoria
            
        Returns:
            CategoriaAtividade: Categoria correspondente ou None
        """
        for categoria in cls:
            if categoria.value == nome or categoria.name == nome:
                return categoria
        return None


class SituacaoTarefa(Enum):
    """
    Enumera√ß√£o que define as situa√ß√µes poss√≠veis para uma tarefa.
    
    Estados do ciclo de vida de uma tarefa:
    - PENDENTE: Tarefa criada mas ainda n√£o realizada
    - FINALIZADA: Tarefa completada com sucesso
    - CANCELADA: Tarefa cancelada (n√£o ser√° realizada)
    """
    
    PENDENTE = "‚è≥ Pendente"
    FINALIZADA = "‚úÖ Finalizada"
    CANCELADA = "‚ùå Cancelada"
    
    def __str__(self):
        """Retorna representa√ß√£o string da situa√ß√£o."""
        return self.value
    
    @classmethod
    def obter_situacoes(cls):
        """
        Retorna lista com todas as situa√ß√µes dispon√≠veis.
        
        Returns:
            list: Lista de strings com nomes das situa√ß√µes
        """
        return [situacao.value for situacao in cls]
    
    @classmethod
    def obter_por_nome(cls, nome):
        """
        Obt√©m situa√ß√£o pelo nome.
        
        Args:
            nome (str): Nome da situa√ß√£o
            
        Returns:
            SituacaoTarefa: Situa√ß√£o correspondente ou None
        """
        for situacao in cls:
            if situacao.value == nome or situacao.name == nome:
                return situacao
        return None
    
    def cor_interface(self):
        """
        Retorna cor apropriada para exibi√ß√£o na interface.
        
        Returns:
            str: C√≥digo da cor em hexadecimal
        """
        cores = {
            self.PENDENTE: "#FFA726",    # Laranja
            self.FINALIZADA: "#66BB6A",  # Verde
            self.CANCELADA: "#EF5350"    # Vermelho
        }
        return cores.get(self, "#757575")  # Cinza padr√£o


# Constantes auxiliares para facilitar o uso
TODAS_CATEGORIAS = CategoriaAtividade.obter_categorias()
TODAS_SITUACOES = SituacaoTarefa.obter_situacoes()

# Mapeamento de emojis por categoria (para interface)
EMOJIS_CATEGORIA = {
    CategoriaAtividade.COZINHA: "üçΩÔ∏è",
    CategoriaAtividade.LIMPEZA: "üßπ",
    CategoriaAtividade.JARDIM: "üå±",
    CategoriaAtividade.ROUPAS: "üß∫",
    CategoriaAtividade.MANUTENCAO: "üîß"
}

# Mapeamento de emojis por situa√ß√£o (para interface)
EMOJIS_SITUACAO = {
    SituacaoTarefa.PENDENTE: "‚è≥",
    SituacaoTarefa.FINALIZADA: "‚úÖ", 
    SituacaoTarefa.CANCELADA: "‚ùå"
}


def obter_emoji_categoria(categoria):
    """
    Obt√©m emoji correspondente √† categoria.
    
    Args:
        categoria (CategoriaAtividade): Categoria da atividade
        
    Returns:
        str: Emoji correspondente
    """
    return EMOJIS_CATEGORIA.get(categoria, "üìù")


def obter_emoji_situacao(situacao):
    """
    Obt√©m emoji correspondente √† situa√ß√£o.
    
    Args:
        situacao (SituacaoTarefa): Situa√ß√£o da tarefa
        
    Returns:
        str: Emoji correspondente
    """
    return EMOJIS_SITUACAO.get(situacao, "üìã")